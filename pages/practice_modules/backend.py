import streamlit as st
import sys
from io import StringIO

def render_backend_content():
    """Affiche le contenu du module D√©veloppement Backend"""
    st.title("üíª D√©veloppement Backend")
    st.write("### Module de pratique en D√©veloppement Backend")
    
    st.write("---")
    
    # Contenu du module
    st.info("üí° Bienvenue dans le module de D√©veloppement Backend !")
    
    # Exemple de contenu √† d√©velopper
    with st.expander("üìö Introduction", expanded=True):
        st.write("""
        Ce module couvre les technologies backend modernes :
        - D√©veloppement serveur avec Python, Node.js, etc.
        - Gestion des bases de donn√©es (SQL, NoSQL)
        - Cr√©ation d'APIs REST et GraphQL
        - Architecture et scalabilit√©
        """)
    
    # √âditeur de code interactif
    st.write("---")
    st.subheader("üñ•Ô∏è √âditeur de Code Python")
    st.write("√âcrivez et testez votre code Python directement ici !")
    
    # Initialiser le code par d√©faut
    if 'backend_code' not in st.session_state:
        st.session_state['backend_code'] = """# √âcrivez votre code Python ici
def saluer(nom):
    return f"Bonjour, {nom}!"

# Testez votre fonction
resultat = saluer("D√©veloppeur")
print(resultat)
"""
    
    # Cr√©er deux colonnes pour l'√©diteur et les options
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # √âditeur de code
        code = st.text_area(
            "Code Python",
            value=st.session_state['backend_code'],
            height=300,
            key="code_editor",
            help="√âcrivez votre code Python ici"
        )
        st.session_state['backend_code'] = code
    
    with col2:
        st.write("**Actions**")
        
        # Bouton pour r√©initialiser
        if st.button("üîÑ R√©initialiser", use_container_width=True):
            st.session_state['backend_code'] = """# √âcrivez votre code Python ici
def saluer(nom):
    return f"Bonjour, {nom}!"

# Testez votre fonction
resultat = saluer("D√©veloppeur")
print(resultat)
"""
            st.rerun()
        
        # Bouton pour ex√©cuter
        run_code = st.button("‚ñ∂Ô∏è Ex√©cuter", use_container_width=True, type="primary")
        
        st.write("---")
        st.write("**Exemples**")
        
        example = st.selectbox(
            "Charger un exemple",
            ["Aucun", "Hello World", "Fonction somme", "Liste et boucle", "API Flask"],
            label_visibility="collapsed"
        )
    
    # Charger l'exemple s√©lectionn√©
    if example != "Aucun":
        examples = {
            "Hello World": """# Hello World en Python
print("Hello, World!")
print("Bienvenue dans le Backend!")
""",
            "Fonction somme": """# Fonction pour additionner deux nombres
def additionner(a, b):
    return a + b

# Test
resultat = additionner(5, 3)
print(f"5 + 3 = {resultat}")
""",
            "Liste et boucle": """# Manipulation de listes
langages = ["Python", "JavaScript", "Java", "Go"]

print("Langages backend populaires:")
for i, langage in enumerate(langages, 1):
    print(f"{i}. {langage}")
""",
            "API Flask": """# Exemple simple d'API Flask
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/api/hello')
def hello():
    return jsonify({"message": "Bonjour depuis l'API!"})

# Note: Cet exemple montre la structure
# Pour ex√©cuter Flask, utilisez un environnement adapt√©
print("Structure API Flask cr√©√©e!")
"""
        }
        st.session_state['backend_code'] = examples[example]
        st.rerun()
    
    # Zone de r√©sultat
    if run_code:
        st.write("---")
        st.subheader("üì§ R√©sultat de l'ex√©cution")
        
        # Capturer la sortie
        old_stdout = sys.stdout
        redirected_output = StringIO()
        sys.stdout = redirected_output
        
        try:
            # Ex√©cuter le code
            exec(code)
            output = redirected_output.getvalue()
            
            if output:
                st.code(output, language="text")
                st.success("‚úÖ Code ex√©cut√© avec succ√®s !")
            else:
                st.info("‚ÑπÔ∏è Le code s'est ex√©cut√© sans afficher de r√©sultat.")
                
        except Exception as e:
            st.error(f"‚ùå Erreur lors de l'ex√©cution :\n```\n{str(e)}\n```")
        
        finally:
            # Restaurer stdout
            sys.stdout = old_stdout
    
    st.write("---")
    
    with st.expander("üéØ Exercices pratiques"):
        st.write("""
        ### Exercice 1 : Cr√©er une fonction
        Cr√©ez une fonction qui prend un nombre en param√®tre et retourne son carr√©.
        
        ### Exercice 2 : Manipulation de dictionnaires
        Cr√©ez un dictionnaire repr√©sentant un utilisateur (nom, email, age) et affichez ses informations.
        
        ### Exercice 3 : API simple
        √âcrivez une fonction qui simule une r√©ponse d'API (retourne un dictionnaire JSON).
        """)
    
    with st.expander("üìù Quiz"):
        st.write("Le quiz d'√©valuation sera ajout√© ici.")

